# coding: utf-8

"""
    Timmi Timesheet API

    Welcome on the documentation for the Timmi Timesheet API. 

    The version of the OpenAPI document: 1.0
    Contact: developers@lucca.fr
    Created by: https://www.lucca.fr
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lucca_timmi_timesheet_python_sdk import schemas  # noqa: F401


class WorkflowSendReminderEmailRequestTimesheetsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "startsAt",
            "ownerId",
            "endsAt",
        }
        
        class properties:
            startsAt = schemas.DateSchema
            endsAt = schemas.DateSchema
            
            
            class ownerId(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 1
            comment = schemas.StrSchema
            __annotations__ = {
                "startsAt": startsAt,
                "endsAt": endsAt,
                "ownerId": ownerId,
                "comment": comment,
            }
    
    startsAt: MetaOapg.properties.startsAt
    ownerId: MetaOapg.properties.ownerId
    endsAt: MetaOapg.properties.endsAt
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startsAt"]) -> MetaOapg.properties.startsAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endsAt"]) -> MetaOapg.properties.endsAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ownerId"]) -> MetaOapg.properties.ownerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["startsAt", "endsAt", "ownerId", "comment", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startsAt"]) -> MetaOapg.properties.startsAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endsAt"]) -> MetaOapg.properties.endsAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ownerId"]) -> MetaOapg.properties.ownerId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["startsAt", "endsAt", "ownerId", "comment", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        startsAt: typing.Union[MetaOapg.properties.startsAt, str, date, ],
        ownerId: typing.Union[MetaOapg.properties.ownerId, decimal.Decimal, int, ],
        endsAt: typing.Union[MetaOapg.properties.endsAt, str, date, ],
        comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkflowSendReminderEmailRequestTimesheetsItem':
        return super().__new__(
            cls,
            *args,
            startsAt=startsAt,
            ownerId=ownerId,
            endsAt=endsAt,
            comment=comment,
            _configuration=_configuration,
            **kwargs,
        )
