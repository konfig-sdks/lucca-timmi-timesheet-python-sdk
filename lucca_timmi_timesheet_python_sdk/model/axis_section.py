# coding: utf-8

"""
    Timmi Timesheet API

    Welcome on the documentation for the Timmi Timesheet API. 

    The version of the OpenAPI document: 1.0
    Contact: developers@lucca.fr
    Created by: https://www.lucca.fr
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lucca_timmi_timesheet_python_sdk import schemas  # noqa: F401


class AxisSection(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    You can [read more about this resource here](reference/Organization-v3.yaml/components/schemas/AxisSection).
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            
            
            class id(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 1
            code = schemas.StrSchema
            name = schemas.StrSchema
            multilingualName = schemas.StrSchema
            
            
            class ownerId(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 1
            startOn = schemas.DateTimeSchema
            endOn = schemas.DateTimeSchema
            active = schemas.BoolSchema
            axisId = schemas.IntSchema
            
            
            class parentAxisSections(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AxisSection']:
                        return AxisSection
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AxisSection'], typing.List['AxisSection']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'parentAxisSections':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AxisSection':
                    return super().__getitem__(i)
            
            
            class childrenAxisSections(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AxisSection']:
                        return AxisSection
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AxisSection'], typing.List['AxisSection']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'childrenAxisSections':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AxisSection':
                    return super().__getitem__(i)
            __annotations__ = {
                "description": description,
                "id": id,
                "code": code,
                "name": name,
                "multilingualName": multilingualName,
                "ownerId": ownerId,
                "startOn": startOn,
                "endOn": endOn,
                "active": active,
                "axisId": axisId,
                "parentAxisSections": parentAxisSections,
                "childrenAxisSections": childrenAxisSections,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["multilingualName"]) -> MetaOapg.properties.multilingualName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ownerId"]) -> MetaOapg.properties.ownerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startOn"]) -> MetaOapg.properties.startOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endOn"]) -> MetaOapg.properties.endOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["axisId"]) -> MetaOapg.properties.axisId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentAxisSections"]) -> MetaOapg.properties.parentAxisSections: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["childrenAxisSections"]) -> MetaOapg.properties.childrenAxisSections: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "id", "code", "name", "multilingualName", "ownerId", "startOn", "endOn", "active", "axisId", "parentAxisSections", "childrenAxisSections", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["multilingualName"]) -> typing.Union[MetaOapg.properties.multilingualName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ownerId"]) -> typing.Union[MetaOapg.properties.ownerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startOn"]) -> typing.Union[MetaOapg.properties.startOn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endOn"]) -> typing.Union[MetaOapg.properties.endOn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["axisId"]) -> typing.Union[MetaOapg.properties.axisId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentAxisSections"]) -> typing.Union[MetaOapg.properties.parentAxisSections, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["childrenAxisSections"]) -> typing.Union[MetaOapg.properties.childrenAxisSections, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "id", "code", "name", "multilingualName", "ownerId", "startOn", "endOn", "active", "axisId", "parentAxisSections", "childrenAxisSections", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        multilingualName: typing.Union[MetaOapg.properties.multilingualName, str, schemas.Unset] = schemas.unset,
        ownerId: typing.Union[MetaOapg.properties.ownerId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        startOn: typing.Union[MetaOapg.properties.startOn, str, datetime, schemas.Unset] = schemas.unset,
        endOn: typing.Union[MetaOapg.properties.endOn, str, datetime, schemas.Unset] = schemas.unset,
        active: typing.Union[MetaOapg.properties.active, bool, schemas.Unset] = schemas.unset,
        axisId: typing.Union[MetaOapg.properties.axisId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        parentAxisSections: typing.Union[MetaOapg.properties.parentAxisSections, list, tuple, schemas.Unset] = schemas.unset,
        childrenAxisSections: typing.Union[MetaOapg.properties.childrenAxisSections, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AxisSection':
        return super().__new__(
            cls,
            *args,
            description=description,
            id=id,
            code=code,
            name=name,
            multilingualName=multilingualName,
            ownerId=ownerId,
            startOn=startOn,
            endOn=endOn,
            active=active,
            axisId=axisId,
            parentAxisSections=parentAxisSections,
            childrenAxisSections=childrenAxisSections,
            _configuration=_configuration,
            **kwargs,
        )
